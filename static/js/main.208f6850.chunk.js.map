{"version":3,"sources":["store/actions/actionTypes.js","scripts/utility.js","store/reducers/auth.js","App.js","serviceWorker.js","index.js","component/BackDrop/BackDrop.js","assets/image/loading-heart.svg"],"names":["AUTH_START","AUTH_SUCCESS","AUTH_FAIL","GET_INFORMATION_START","GET_INFORMATION_SUCCESS","GET_INFORMATION_FAIL","GET_USD_RATE","SET_DIRECT_PATH","updateObject","oldObject","updatedValues","generateString","length","result","characters","charactersLength","i","charAt","Math","floor","random","convertWeiToEther","amount","web3","utils","fromWei","convertWeiToUSD","rate","ether","Decimal","mul","toString","convertEtherToWei","toWei","USDFormatCustom","props","inputRef","onChange","other","getInputRef","onValueChange","values","target","name","value","thousandSeparator","isNumericString","prefix","NumberFormatCustom","PhoneFormatCustom","format","mask","PhoneTextFormatCustom","displayType","initialState","address","infor","error","loading","authRedirectPath","usdRate","authStart","state","action","authSuccess","authFail","getInforSuccess","setAuthRedirectPath","path","getUSDRate","UserPage","React","lazy","LoginPage","InfoPage","connect","routes","useEffect","then","publicEntryInfo","default","options","from","render","to","fallback","BackDrop","open","Boolean","window","location","hostname","match","composeEnhancers","compose","store","createStore","type","actionTypes","applyMiddleware","thunk","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Backdrop","show","className","onClick","clicked","children","module","exports"],"mappings":"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","file":"static/js/main.208f6850.chunk.js","sourcesContent":["export const AUTH_USER = \"AUTH_USER\";\nexport const AUTH_START = \"AUTH_START\";\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\nexport const AUTH_FAIL = \"AUTH_FAIL\";\nexport const GET_INFORMATION = \"GET_INFORMATION\";\nexport const GET_INFORMATION_START = \"GET_INFORMATION_START\";\nexport const GET_INFORMATION_SUCCESS = \"GET_INFORMATION_SUCCESS\";\nexport const GET_INFORMATION_FAIL = \"GET_INFORMATION_FAIL\";\nexport const GET_USD_RATE = \"GET_USD_RATE\";\nexport const SET_DIRECT_PATH = \"SET_DIRECT_PATH\";\n","import web3 from \"web3\";\nimport Decimal from \"decimal.js\";\nimport React from \"react\";\nimport NumberFormat from \"react-number-format\";\nexport const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\n\nexport const generateString = length => {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const convertWeiToEther = amount => {\n  return amount === 0 ? 0 : web3.utils.fromWei(amount, \"ether\");\n};\n\nexport const convertWeiToUSD = (amount, rate) => {\n  const ether = convertWeiToEther(amount);\n  const usdAmount = new Decimal(ether).mul(new Decimal(rate));\n  return usdAmount.toString();\n};\n\nexport const convertEtherToWei = amount => {\n  return !amount ? 0 : web3.utils.toWei(amount, \"ether\");\n};\n\nexport function USDFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"$\"\n    />\n  );\n}\nexport function NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      isNumericString\n    />\n  );\n}\n\nexport function PhoneFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      format=\"+1 (###) ###-####\"\n      mask=\"_\"\n    />\n  );\n}\n\nexport function PhoneTextFormatCustom(props) {\n  const { ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      displayType={\"text\"}\n      format=\"+1 (###) ###-####\"\n      mask=\"_\"\n    />\n  );\n}\n","import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject } from \"../../scripts/utility\";\nconst initialState = {\n  address: null,\n  infor: null,\n  error: null,\n  loading: false,\n  authRedirectPath: \"/\",\n  usdRate: 0\n};\n\nconst authStart = (state, action) => {\n  return updateObject(state, { error: null, loading: true });\n};\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    address: action.address,\n    loading: false\n  });\n};\nconst authFail = (state, action) => {\n  return updateObject(state, { error: action.error, loading: false });\n};\n\nconst getInforSuccess = (state, action) => {\n  return updateObject(state, {\n    infor: action.infor,\n    loading: false\n  });\n};\nconst setAuthRedirectPath = (state, action) => {\n  return updateObject(state, { authRedirectPath: action.path });\n};\n\nconst getUSDRate = (state, action) => {\n  return updateObject(state, { usdRate: action.rate });\n};\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n    case actionTypes.GET_INFORMATION_START:\n      return authStart(state, action);\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n    case actionTypes.AUTH_FAIL:\n    case actionTypes.GET_INFORMATION_FAIL:\n      return authFail(state, action);\n    case actionTypes.GET_INFORMATION_SUCCESS:\n      return getInforSuccess(state, action);\n    case actionTypes.SET_DIRECT_PATH:\n      return setAuthRedirectPath(state, action);\n    case actionTypes.GET_USD_RATE:\n      return getUSDRate(state, action);\n    default:\n      return state;\n  }\n};\n","import React, { Suspense, useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport BackDrop from \"./component/BackDrop/BackDrop\";\nimport Loading from \"./assets/image/loading-heart.svg\";\nconst UserPage = React.lazy(() => {\n  return import(\"./container/UserPage/UserPage\");\n});\nconst LoginPage = React.lazy(() => {\n  return import(\"./container/LoginPage/LoginPage\");\n});\nconst InfoPage = React.lazy(() => {\n  return import(\"./container/InfoPage/InfoPage\");\n});\nfunction App(props) {\n  let routes = null;\n  useEffect(() => {\n    import(\"./blockchain/publicEntryInfo\").then(publicEntryInfo => {\n      publicEntryInfo.default.options.from = props.address;\n    });\n  }, [props.address]);\n  if (!!props.address) {\n    routes = (\n      <Switch>\n        <Route path=\"/infor\" render={props => <InfoPage {...props} />} />\n        <Route path=\"/\" render={props => <UserPage {...props} />} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/login\" render={props => <LoginPage {...props} />} />\n        <Redirect to=\"/login\" />\n      </Switch>\n    );\n  }\n  return (\n    <Suspense\n      fallback={\n        <BackDrop open={true}>\n          <Loading />\n        </BackDrop>\n      }\n    >\n      {routes}\n    </Suspense>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    address: state.address\n  };\n};\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from \"./store/reducers/auth\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst composeEnhancers =\n  (process.env.NODE_ENV === \"development\"\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    : null) || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"./BackDrop.scss\";\nconst Backdrop = props =>\n  props.show ? (\n    <div className=\"backdrop\" onClick={props.clicked}>\n      {props.children}\n    </div>\n  ) : null;\n\nexport default Backdrop;\n","module.exports = __webpack_public_path__ + \"static/media/loading-heart.40ab1b0a.svg\";"],"sourceRoot":""}